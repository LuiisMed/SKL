

<div class="content-wrapper">
    <!-- Content -->

    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4">Usuarios</h4>
        <button type="button" id="btnNew" class="btn btn-primary  btn-sm" style="width:90px" title="New Usuario"><i class="fa fa-save" aria-hidden="true"></i> New</button>

        <hr class="my-5" />

        <div id="myGrid" style="height: 600px" class="ag-theme-quartz"></div>

    </div>
    <!-- / Content -->

    <div class="content-backdrop fade"></div>
</div>

<!-- Modal vacío que se llenará dinámicamente -->
<div id="ModalWindow" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <!-- Aquí se cargará el contenido dinámicamente -->
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/paramquery-pro/jsZip-2.5.0/jszip.min.js"></script>
    <script src="~/lib/paramquery-pro/jszip-utils-0.0.2/jszip-utils.min.js"></script>
    <script src="~/lib/paramquery-pro/pqgrid.min.js"></script>
    <script src="~/lib/paramquery-pro/localize/pq-localize-en.js"></script>
    <script src="~/lib/FileSaver/dist/FileSaver.min.js"></script>

    <script>

        // Función para abrir el popup desde el controlador y cargarlo en el modal
        $("#btnNew").click(function () {
            $.ajax({
                url: '@Url.Action("NewUsuarioPopUp", "Usuario")',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);
                    $('#ModalWindow').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        });




        var maxRowHeight = 25;
        var currentRowHeight;

        let gridApi;

        const gridOptions = {
            columnDefs: [
                { field: "idUser", headerName: "ID", minWidth: 70, maxWidth: 150, hide: true },
                { field: "name", headerName: "Nombre", minWidtha: 150 },
                { field: "userName", headerName: "Usuario", minWidth: 70, maxWidth: 150, },
                { field: "userPassword", headerName: "Contraseña", minWidth: 130 },
                { field: "idRole", minWidth: 70, maxWidth: 150, hide: true },
                { field: "roleName", headerName: "Permisos", minWidth: 120 },
                { field: "idPosition", minWidth: 120, hide: true },
                { field: "positionName", headerName: "Posicion", minWidth: 80 },
                { field: "idShift", minWidth: 80, hide: true },
                { field: "shiftName", headerName: "Turno", minWidth: 80 },
                { field: "idDepartment", minWidth: 80, hide: true },
                { field: "departmentName", headerName: "Departamento", minWidth: 80 },
                { field: "empNo", headerName: "Numero de Empleado", minWidth: 80 },
                {}
            ],

            rowData: null,
            autoSizeStrategy: {
                type: "fitGridWidth",
            },
            onGridReady: (params) => {
                maxRowHeight = params.api.getSizesForCurrentTheme().rowHeight;
                currentRowHeight = maxRowHeight;
            },
            onFirstDataRendered: onFirstDataRendered,
            onGridSizeChanged: onGridSizeChanged,
            getRowHeight: (params) => {
                return currentRowHeight;
            },
            defaultColDef: {
                filter: "agTextColumnFilter",
                floatingFilter: true,
            },
            rowSelection: "multiple",
            suppressRowClickSelection: true,
            pagination: true,
            paginationPageSize: 10,
            paginationPageSizeSelector: [10, 25, 50],
        };

        function onFirstDataRendered(params) {
            updateRowHeight(params);
        }

        function onGridSizeChanged(params) {
            updateRowHeight(params);
        }

        const updateRowHeight = (params) => {
            // get the height of the grid body - this excludes the height of the headers
            const bodyViewport = document.querySelector(".ag-body-viewport");
            if (!bodyViewport) {
                return;
            }

            var gridHeight = bodyViewport.clientHeight;
            // get the rendered rows
            var renderedRowCount = params.api.getDisplayedRowCount();

            // if the rendered rows * min height is greater than available height, just just set the height
            // to the min and let the scrollbar do its thing
            if (renderedRowCount * minRowHeight >= gridHeight) {
                if (currentRowHeight !== minRowHeight) {
                    currentRowHeight = minRowHeight;
                    params.api.resetRowHeights();
                }
            } else {
                // set the height of the row to the grid height / number of rows available
                currentRowHeight = Math.floor(gridHeight / renderedRowCount);
                params.api.resetRowHeights();
            }
        };

        // setup the grid after the page has finished loading
        document.addEventListener("DOMContentLoaded", function () {
            var gridDiv = document.querySelector("#myGrid");
            gridApi = agGrid.createGrid(gridDiv, gridOptions);

            fetch('@Url.Action("UsuariosJSON", "Usuario")')
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then((data) => {
                    console.log("Datos recibidos:", data); // Imprime los datos en la consola
                    gridApi.setGridOption("rowData", data);
                })
                .catch((error) => {
                    console.error("Ocurrió un error durante la solicitud:", error);
                });
        });

        // // // modify category
        // // let updateCategory = (id) => showWindowPopUp("@Url.Action("UpdateCategoryPopUp", "Category")" + "?id=" + id);
        // // // delete category
        // // let deleteCategory = (id) => showWindowPopUp("@Url.Action("DeleteCategoryPopUp", "Category")" + "?id=" + id);

        let connection = new signalR.HubConnectionBuilder().withUrl(systemHubUrl()).build();
        connection.start();
        connection.on("RefreshUserGrid", function () {
            //
            console.log("RefreshUserGrid");
            waitTime(function () {
                $grid = $(".myGrid").pqGrid('refresh');
                $grid = $("#myGrid").pqGrid('refreshDataAndView');
            });
        });
    </script>
}