@model IEnumerable<Fase>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutUsuario.cshtml";
}


<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="row">
            <div class="col-lg-12 mb-4 order-0">
                <div class="card">
                    <div class="d-flex align-items-end row">
                        <div class="col-sm-7">
                            @if (User.Identity!.IsAuthenticated)
                            {
                                <div class="card-body">
                                    <h5 class="card-title text-primary">Bienvenido a la Plataforma Skip Level <b>@User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault()</b>! 🎉</h5>
                                    <p class="mb-4">
                                        Para mas Informacion de como usar la plataforma acercate a <span class="fw-bold">Recursos Humanos</span> para mas informacion.
                                    </p>
                                </div>
                            }
                        </div>
                        <div class="col-sm-5 text-center text-sm-left">
                            <div class="card-body pb-0 px-0 px-md-4">
                                <img src="../assets/img/illustrations/man-with-laptop-light.png"
                                     height="140"
                                     alt="View Badge User"
                                     data-app-dark-img="illustrations/man-with-laptop-dark.png"
                                     data-app-light-img="illustrations/man-with-laptop-light.png" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @{
            var userId = User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault();
            var fetchUrl = Url.Action("NotificationsJson", "Notifications"); // Reemplaza "ControllerName" con el nombre correcto

        }

        <div class="row">
            @if (Model != null && Model.Any(fase => fase.IsActive == true))
            {
                foreach (var fase in Model.Where(fase => fase.IsActive == true))
                {
                    <div class="col-2 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <div class="card-title d-flex justify-content-between">
                                    <div class="avatar flex-shrink-0">
                                        <i class='bx bxs-calendar-check' style='color:#49d189 ; font-size: 40px'></i>
                                    </div>
                                </div>
                                <h3 class="card-title text-nowrap mb-2"> @fase.Name </h3>
                                <button data-id="@fase.Id" data-userid="@userId" type="button" class="btn rounded-pill btn-md btn-primary btnNew">Acciones</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="toastContainer"></div>


    <div class="content-backdrop fade"></div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    @*     <script src="~/lib/paramquery-pro/jsZip-2.5.0/jszip.min.js"></script>
    <script src="~/lib/paramquery-pro/jszip-utils-0.0.2/jszip-utils.min.js"></script>
    <script src="~/lib/paramquery-pro/pqgrid.min.js"></script>
    <script src="~/lib/paramquery-pro/localize/pq-localize-en.js"></script> *@
    <script src="~/lib/FileSaver/dist/FileSaver.min.js"></script>

    <script>
        $(document).ready(function () {
            $(".btnNew").click(function () {
                var idFase = $(this).data("id");
                var userId = $(this).data("userid");
                // Usamos el idFase y el userId en la URL
                window.location.href = '@Url.Action("Index", "TaskUs")' + '?fasefilter=' + idFase + '&userfilter=' + userId;
            });
        });


        document.addEventListener('DOMContentLoaded', () => {
            const userId = '@userId';
            const url = '@fetchUrl';

            const FIVE_SECONDS_IN_MS = 6 * 60 * 60 * 1000;
            const TWO_HOURS_IN_MS = 6 * 60 * 60 * 1000; 
            const toastContainer = document.getElementById('toastContainer');
            const TOAST_LAST_SHOWN_KEY = 'toastLastShown';

            async function checkNotifications() {
                console.log("Verificando notificaciones...");
                try {
                    const response = await fetch(`${url}?IdUser=${userId}`, {
                        method: 'GET',
                    });

                    if (!response.ok) {
                        throw new Error(`Error: ${response.statusText}`);
                    }

                    const notifications = await response.json();
                    console.log('Notificaciones obtenidas:', notifications);

                    const hasUnread = notifications.some(notification => !notification.isReaded);

                    if (hasUnread && canShowToast()) {
                        renderToast();
                    }
                } catch (error) {
                    console.error('Error al obtener las notificaciones:', error);
                }
            }

            function canShowToast() {
                const lastShown = localStorage.getItem(TOAST_LAST_SHOWN_KEY);
                const now = Date.now();
                // Verifica si han pasado 2 horas desde la última vez que se mostró el toast
                return !lastShown || now - lastShown >= TWO_HOURS_IN_MS;
            }

            function markToastAsShown() {
                localStorage.setItem(TOAST_LAST_SHOWN_KEY, Date.now());
            }

            function renderToast() {
                if (document.getElementById('notificationToast')) return;

                const toastHTML = `
                    <div id="notificationToast" class="bs-toast toast toast-placement-ex m-2 fade bg-warning top-0 start-0 show"
                         role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <i class="bx bx-bell me-2"></i>
                            <strong class="me-auto fw-semibold">Recordatorio</strong>
                            <small>Hace un momento</small>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            Tienes notificaciones pendientes por revisar.
                        </div>
                    </div>
                `;
                toastContainer.insertAdjacentHTML('beforeend', toastHTML);

                const toastElement = document.getElementById('notificationToast');
                const toast = new bootstrap.Toast(toastElement);
                toast.show();

                markToastAsShown();  // Actualiza el localStorage al mostrar el toast
            }

            // Establece el intervalo de verificación de notificaciones cada 5 segundos
            setInterval(checkNotifications, FIVE_SECONDS_IN_MS);
            checkNotifications(); // Llama inmediatamente al cargar la página
        });






        // localStorage.removeItem('toastLastShown');
        // console.log('Local Storage limpiado al cargar la página');
    </script>



}