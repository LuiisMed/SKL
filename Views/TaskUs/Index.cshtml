@model SKL.Models.TaskPerEval

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutUsuario.cshtml";
}


<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">

        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <h5 class="card-header">Resultados de Encuestas</h5>
                    <div class="card-body">
                        <!--INICIO DEL FORMULARIO DE FILTRO-->
                        <a asp-controller="TaskUs" asp-action="TaskJson" asp-route-idUser="@Model.UserFilter" asp-route-idFase="@Model.FaseFilter" hidden>
                            Cargar Tareas
                        </a>
                        @if (Model.Evals != null && Model.Evals.Any(e => e.IdUserE == Model.UserFilter && e.IdFaseE == Model.FaseFilter))
                        {
                            var eval = Model.Evals.First(e => e.IdUserE == Model.UserFilter && e.IdFaseE == Model.FaseFilter);

                            <div class="mb-3">
                                <label asp-for="UserEval" class="form-label">Calificación</label>
                                <input type="text" asp-for="UserEval" class="form-control" value="@eval.UserEval" aria-describedby="defaultFormControlHelp" readonly>
                            </div>
                            <div>
                                <label asp-for="Comentario" class="form-label">Comentarios</label>
                                <textarea class="form-control" rows="3" readonly>@eval.Comentario</textarea>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Results" class="form-label">Archivo de Resultado</label>
                                <input type="text" asp-for="Results" id="resultsInput" class="form-control" value="@eval.Results" aria-describedby="defaultFormControlHelp" readonly>
                            </div>

                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="DownloadEva(document.getElementById('resultsInput').value)">
                                Descargar
                            </button>
                        }


                        else
                        {
                            <div class="mb-3">
                                <label asp-for="UserEval" class="form-label">Calificacion</label>
                                <input type="text" asp-for="UserEval" class="form-control" aria-describedby="defaultFormControlHelp" readonly>
                            </div>
                            <div>
                                <label asp-for="Comentario" class="form-label">Comentarios</label>
                                <textarea class="form-control" asp-for="Comentario" rows="3" placeholder="Comentarios al Usuario de la calificacion obtenida" readonly></textarea>
                            </div>
                            <div class="mb-3">
                                <label asp-for="Results" class="form-label">Archivo de Reultado</label>
                                <input type="text" asp-for="Results" class="form-control" aria-describedby="defaultFormControlHelp" readonly>
                            </div>
                        }

                        <div class="divider">
                            <div class="divider-text">Acciones a Realizar</div>
                        </div>

                        <br />


                    </div>
                </div>
            </div>
        </div>
        <div id="myGrid" style="height: 1000px" class="ag-theme-quartz"></div>

    </div>

    <div id="ModalWindow" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- Aquí se cargará el contenido dinámicamente -->
            </div>
        </div>
    </div>


    <div class="content-backdrop fade"></div>

</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    @*     <script src="~/lib/paramquery-pro/jsZip-2.5.0/jszip.min.js"></script>
    <script src="~/lib/paramquery-pro/jszip-utils-0.0.2/jszip-utils.min.js"></script>
    <script src="~/lib/paramquery-pro/pqgrid.min.js"></script>
    <script src="~/lib/paramquery-pro/localize/pq-localize-en.js"></script> *@
    <script src="~/lib/FileSaver/dist/FileSaver.min.js"></script>


    <script>



        let gridApi;
        const hoy = new Date(); 

        const gridOptions = {
            columnDefs: [
                { field: "idTask", headerName: "ID", minWidth: 70, maxWidth: 150, hide: false },
                { field: "idUserT", headerName: "ID Usuario", minWidtha: 150, hide: true },
                { field: "name", headerName: "Usuario", minWidtha: 150, hide: true },
                { field: "idFaseT", headerName: "ID Fase", minWidth: 70, maxWidth: 150, hide: true },
                { field: "faseName", headerName: "Fase", minWidth: 70, maxWidth: 80, hide: false },
                { field: "accion", headerName: "Accion", minWidth: 250, maxWidth: 300, },
                { field: "idAspect", headerName: "ID Aspecto", minWidth: 70, maxWidth: 150, hide: true },
                { field: "aspectName", headerName: "Aspecto", minWidth: 70, maxWidth: 150, hide: false },
                { field: "idEvidences", headerName: "ID Evidence", minWidth: 70, maxWidth: 150, hide: true },
                { field: "evidences", headerName: "Evidencia", minWidth: 70, maxWidth: 150, hide: false },
                { field: "month", headerName: "Month", minWidth: 70, maxWidth: 150, hide: true, rowGroup: true }, // Agrupación por mes
                { field: "start", headerName: "Inicio", minWidth: 60, maxWidth: 120, hide: false },
                { field: "end", headerName: "Cierre", minWidth: 60, maxWidth: 120, hide: false },
                {
                    field: "isCompleted",
                    headerName: "Revisado",
                    minWidth: 50,
                    maxWidth: 115,
                    cellRenderer: (params) => {
                        if (!params.data) return null;

                        // Obtener el estado del checkbox
                        const checked = params.data.isCompleted ? 'checked' : '';
                        // Usar una clase CSS para aplicar el estilo de no interactuable
                        const noInteract = 'no-interact';

                        return `
                    <div class="checkbox-container">
                        <input type="checkbox" ${checked} class="${noInteract}" />
                        <span class="custom-checkbox ${checked ? 'checked' : ''}"></span>
                    </div>
                `;
                    }
                },
                {
                    headerName: "Acciones",
                    field: "actions",
                    minWidth: 150,
                    cellRenderer: (params) => {
                        // Verificamos si params.data es nulo o undefined
                        if (!params.data) return '';

                        const endDate = new Date(params.data.end);
                        const hoy = new Date();
                        hoy.setHours(0, 0, 0, 0); // Ignoramos la hora para comparar solo fechas

                        // Sumamos 1 día a la fecha de cierre
                        const endDatePlusOneDay = new Date(endDate);
                        endDatePlusOneDay.setDate(endDate.getDate() + 1);

                        // Definimos si los botones deben estar deshabilitados
                        const disabled = hoy > endDatePlusOneDay && !params.data.evidences ? 'disabled' : '';

                        return `
                    <button type="button" ${disabled} onclick="InsertEvidence('${params.data.idTask}')" class="btn btn-icon btn-primary">
                        <span class="tf-icons bx bx-upload"></span>
                    </button>
                    <button type="button" ${disabled} onclick="Download('${params.data.evidences}')" class="btn btn-icon btn-secondary">
                        <span class="tf-icons bx bx-download"></span>
                    </button>
                    <button type="button" ${disabled} onclick="handleDelete('${params.data.idEvidences}')" class="btn btn-icon btn-danger">
                        <span class="tf-icons bx bx-trash"></span>
                    </button>
                `;
                    },
                }

            ],
            rowClassRules: {
                'row-vencida': (params) => {
                    if (!params.data) return false;

                    const endDate = new Date(params.data.end);
                    const endDatePlusOneDay = new Date(endDate);
                    endDatePlusOneDay.setDate(endDate.getDate() + 1);

                    return !params.data.evidences && hoy > endDatePlusOneDay;
                },
                'row-verde': (params) =>
                    params.data && params.data.isCompleted && params.data.evidences,
                'row-amarilla': (params) =>
                    params.data && !params.data.isCompleted && params.data.evidences
            },
            onGridReady: (params) => {
                gridApi = params.api; // Obtener la instancia de gridApi
            },
            groupDefaultExpanded: -1,
            defaultColDef: {
                filter: "agTextColumnFilter",
                floatingFilter: true,
                enableRowGroup: true
            },
            rowGroupPanelShow: 'always',
            pagination: true,
            paginationPageSize: 10,
            paginationPageSizeSelector: [10, 25, 50],
        };

        //estilos de las rows
        const style = document.createElement('style');
        style.innerHTML = `
            .checkbox-container input[type="checkbox"].no-interact {
                pointer-events: none; /* Desactiva la interacción */
                opacity: 0.6; /* Cambia la opacidad para parecer no interactuable */
            }
            /* Estilo adicional para el custom checkbox, si es necesario */
            .custom-checkbox {
                /* Aquí puedes agregar más estilos para personalizar */
            }
            .row-vencida {
                background-color: rgba(255, 0, 0, 0.1);
                pointer-events: none; /* Desactiva la interacción */
            }
            .row-verde {
                background-color: rgba(0, 128, 0, 0.2); /* Verde claro */
            }
            .row-amarilla {
                background-color: rgba(255, 255, 0, 0.2); /* Amarillo claro */
            }
        `;
        document.head.appendChild(style);

        function InsertEvidence(idTask) {
            $.ajax({
                url: '@Url.Action("NewEvidencePopUp", "TaskUs")' + '?idTask=' + idTask, 
                type: 'POST',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);  
                    $('#ModalWindow').modal('show');  
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        }

        function Download(evidences) {
            window.location.href = '@Url.Action("DownloadFile", "TaskUs")' + '?fileName=' + encodeURIComponent(evidences);
        }

        function DownloadEva(Results) {
            window.location.href = '@Url.Action("DownloadEva", "TaskUs")' + '?fileName=' + encodeURIComponent(Results);
        }

        function handleDelete(idEvidences) {
            $.ajax({
                url: '@Url.Action("DeleteEviPopUp", "TaskUs")' + '?idEvidences=' + idEvidences,
                type: 'POST',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);
                    $('#ModalWindow').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        }


        const userFilter = @Model.UserFilter;
        const faseFilter = @Model.FaseFilter;

        const urlParams = new URLSearchParams(window.location.search);
        const idTask = urlParams.get('idtask');

        // setup the grid after the page has finished loading
        document.addEventListener("DOMContentLoaded", function () {
            var gridDiv = document.querySelector("#myGrid");
            var gridApi = agGrid.createGrid(gridDiv, gridOptions);

            // Cargar los datos iniciales
            fetch('@Url.Action("TaskJson", "TaskUs")' + '?idUser=' + userFilter + '&idFase=' + faseFilter)
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then((data) => {
                    console.log("Datos recibidos:", data); // Imprime los datos en la consola
                    gridApi.setGridOption("rowData", data); // Establece los datos en el grid
                })
                .catch((error) => {
                    console.error("Ocurrió un error durante la solicitud:", error);
                });

            // Función para refrescar el grid
            function refreshUserGrid() {
                fetch('@Url.Action("TaskJson", "TaskUs")' + '?idUser=' + userFilter + '&idFase=' + faseFilter)
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log("Datos actualizados recibidos:", data);
                        gridApi.setGridOption("rowData", data); // Actualiza los datos en el grid
                    })
                    .catch((error) => {
                        console.error("Ocurrió un error durante la solicitud de actualización:", error);
                    });
            }

            // Conectar SignalR para escuchar el evento de refresco
            const connection = new signalR.HubConnectionBuilder().withUrl(systemHubUrl()).build();

            connection.on("RefreshTasksGrid", function () {
                refreshUserGrid(); // Llamada a la función que refresca los datos del grid
            });

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });
        });


    </script>
}