@model SKL.Models.Tasks

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">

        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <h5 class="card-header">Asignar Acciones</h5>
                    <div class="card-body">
                        <form>
                            <input type="hidden" asp-for="Id" />

                            <div class="mb-3">
                                <label asp-for="IdUser" class="form-label">Usuarios</label>
                                <select asp-for="IdUser" class="form-control select2">
                                    <option value="">Selecciona un usuario</option> <!-- Opción inicial vacía -->
                                    @foreach (var user in ViewBag.Usuarios)
                                    {
                                        <option value="@user.IdUser">@user.EmpNo - @user.Name</option>
                                    }
                                </select>
                            </div>

                            <div>
                                <label asp-for="Accion" class="form-label">Accion a realizar</label>
                                <textarea class="form-control" asp-for="Accion" rows="3"></textarea>
                            </div>

                            <div class="mb-3">
                                <label asp-for="IdAspect" class="form-label">Aspecto</label>
                                <select asp-for="IdAspect" class="form-control">
                                    @foreach (var role in ViewBag.Aspectos)
                                    {
                                        <option value="@role.Id">@role.Name</option>
                                    }
                                </select>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div id="myGrid" style="height: 600px" class="ag-theme-quartz"></div>

    </div>

    <div class="content-backdrop fade"></div>

</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    @*     <script src="~/lib/paramquery-pro/jsZip-2.5.0/jszip.min.js"></script>
    <script src="~/lib/paramquery-pro/jszip-utils-0.0.2/jszip-utils.min.js"></script>
    <script src="~/lib/paramquery-pro/pqgrid.min.js"></script>
    <script src="~/lib/paramquery-pro/localize/pq-localize-en.js"></script> *@
    <script src="~/lib/FileSaver/dist/FileSaver.min.js"></script>

    <script>

        // In your Javascript (external .js resource or <script> tag)
        $(document).ready(function () {
            // Inicializar Select2 en el select con clase .select2
            $('.select2').select2({
                placeholder: "Selecciona un usuario",  // Texto del placeholder
                allowClear: true  // Habilitar botón de limpiar selección
            });
        });


        var minRowHeight = 25;
        var currentRowHeight;

        let gridApi;

        const gridOptions = {
            columnDefs: [
                { field: "idUser", headerName: "ID", minWidth: 70, maxWidth: 150, hide: true },
                { field: "name", headerName: "Nombre", minWidtha: 150 },
                { field: "userName", headerName: "Usuario", minWidth: 70, maxWidth: 150, },
                { field: "userPassword", headerName: "Contraseña", minWidth: 130 },
                { field: "idRole", minWidth: 70, maxWidth: 150, hide: true },
                { field: "roleName", headerName: "Permisos", minWidth: 120 },
                { field: "idPosition", minWidth: 120, hide: true },
                { field: "positionName", headerName: "Posicion", minWidth: 80 },
                { field: "idShift", minWidth: 80, hide: true },
                { field: "shiftName", headerName: "Turno", minWidth: 80 },
                { field: "idDepartment", minWidth: 80, hide: true },
                { field: "departmentName", headerName: "Departamento", minWidth: 80 },
                { field: "empNo", headerName: "Numero de Empleado", minWidth: 80 },
                {
                    headerName: "Acciones",
                    field: "actions",
                    cellRenderer: function (params) {
                        // Aquí puedes agregar HTML para los botones
                        return `

                                            <button type="button" onclick="handleDelete('${params.data.idUser}')" class="btn btn-icon btn-danger">
                                              <span class="tf-icons bx bx-trash"></span>
                                            </button>
                                            <button type="button" onclick="handleUpdate('${params.data.idUser}')" class="btn btn-icon btn-primary">
                                              <span class="tf-icons bx bx-pen"></span>
                                            </button>

                            `;
                    },
                    minWidth: 150
                }
            ],
            rowData: null,
            autoSizeStrategy: {
                type: "fitGridWidth",
            },
            onGridReady: (params) => {
                gridApi = params.api; // Obtener la instancia de gridApi
                minRowHeight = params.api.getSizesForCurrentTheme().rowHeight;
                currentRowHeight = minRowHeight;
            },

            defaultColDef: {
                filter: "agTextColumnFilter",
                floatingFilter: true,
            },
            rowSelection: "multiple",
            suppressRowClickSelection: true,
            pagination: true,
            paginationPageSize: 10,
            paginationPageSizeSelector: [10, 25, 50],
        };



        // Función para abrir el popup desde el controlador y cargarlo en el modal
        $("#btnNew").click(function () {
            $.ajax({
                url: '@Url.Action("NewUsuarioPopUp", "Usuario")',
                type: 'POST',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);
                    $('#ModalWindow').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        });

        function handleDelete(idUser) {
            $.ajax({
                url: '@Url.Action("DeleteUsuarioPopUp", "Usuario")' + '?idusr=' + idUser,  // Llama a la acción de eliminación
                type: 'POST',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);  // Carga el contenido del modal
                    $('#ModalWindow').modal('show');  // Muestra el modal
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        }

        function handleUpdate(idUser) {
            $.ajax({
                url: '@Url.Action("UpdateUsuarioPopUp", "Usuario")' + '?idusr=' + idUser,  // Llama a la acción de eliminación
                type: 'POST',
                success: function (data) {
                    $('#ModalWindow .modal-content').html(data);  // Carga el contenido del modal
                    $('#ModalWindow').modal('show');  // Muestra el modal
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar el contenido del modal:", status, error);
                    alert("Error al cargar el contenido del modal.");
                }
            });
        }


        // setup the grid after the page has finished loading
        document.addEventListener("DOMContentLoaded", function () {
            var gridDiv = document.querySelector("#myGrid");
            var gridApi = agGrid.createGrid(gridDiv, gridOptions);

            // Cargar los datos iniciales
            fetch('@Url.Action("UsuariosJSON", "Usuario")')
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then((data) => {
                    console.log("Datos recibidos:", data); // Imprime los datos en la consola
                    gridApi.setGridOption("rowData", data); // Establece los datos en el grid
                })
                .catch((error) => {
                    console.error("Ocurrió un error durante la solicitud:", error);
                });

            // Función para refrescar el grid
            function refreshUserGrid() {
                fetch('@Url.Action("UsuariosJSON", "Usuario")')
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log("Datos actualizados recibidos:", data);
                        gridApi.setGridOption("rowData", data); // Actualiza los datos en el grid
                    })
                    .catch((error) => {
                        console.error("Ocurrió un error durante la solicitud de actualización:", error);
                    });
            }

            // Conectar SignalR para escuchar el evento de refresco
            const connection = new signalR.HubConnectionBuilder().withUrl(systemHubUrl()).build();

            connection.on("RefreshUserGrid", function () {
                refreshUserGrid(); // Llamada a la función que refresca los datos del grid
            });

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });
        });

    </script>
}