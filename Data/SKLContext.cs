// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using SKL.Data.IContext;

namespace SKL.Data;

public abstract class SKLContext : ISKLContext
{
    private readonly string _connectionString;
    public event EventHandler DataChangeEventHandler;

    public SKLContext(string connectionString) => _connectionString = connectionString;

    public async Task<IEnumerable<T>> ExecuteQueryAsync<T>(string query, string sentence)
    {
        using var connection = new SqlConnection(_connectionString);
        var results = await connection.ExecuteQueryAsync<T>(sentence);
        return results;
    }

    public async Task<(bool, string)> ExecuteNonQueryAsync(string sentence)
    {
        var (error, result) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            var records = await connection.ExecuteNonQueryAsync(sentence);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            error = true;
            result = ex.Message;
        }
        return (error, result);
    }

    public async Task<IEnumerable<T>> ExecuteStoredProcedureQueryAsync<T>(string storedProcedure, object parameters)
    {
        IEnumerable<T> results;
        try
        {
            using var connection = new SqlConnection(_connectionString);
            results = await connection.ExecuteQueryAsync<T>(storedProcedure, parameters, commandType: CommandType.StoredProcedure);
        }
        catch (Exception ex)
        {
            results = new List<T>();
        }
        return results;
    }

    public async Task<(bool, string)> ExecuteStoredProcedureDMLAsync(string storedProcedure, object parameters)
    {
        var (error, result) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            result = await connection.ExecuteScalarAsync<string>(storedProcedure, parameters, commandType: CommandType.StoredProcedure);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            error = true;
            result = ex.Message;
        }
        return (error, result);
    }

    public async Task<(bool, int, string)> ExecuteStoredProcedureDMLAsync2(string storedProcedure, object parameters)
    {
        var (error, generatedId, message) = (false, 0, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            generatedId = await connection.ExecuteScalarAsync<int>(storedProcedure, parameters, commandType: CommandType.StoredProcedure);
            message = "Operación realizada con éxito.";
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            error = true;
            message = ex.Message; // Captura el mensaje de error
        }
        return (error, generatedId, message); // Retorna error, ID generado y mensaje
    }


    public async Task<(bool, string)> ExecuteSP10MinAsync(string storedProcedure, object parameters)
    {
        var (error, result) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            result = await connection.ExecuteScalarAsync<string>(storedProcedure, parameters, commandType: CommandType.StoredProcedure, commandTimeout: 600);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            error = true;
            result = ex.Message;
        }
        return (error, result);
    }

    public async Task<(bool, string)> BulkInsertAsync<T>(IEnumerable<T> list) where T : class
    {
        var (error, message) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            await connection.BulkInsertAsync(list);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            (error, message) = (true, ex.Message);
        }
        return (error, message);
    }

    public async Task<(bool, string)> BulkMergeAsync<T>(IEnumerable<T> list, Expression<Func<T, object>> qualifiers) where T : class
    {
        var (error, message) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            await connection.BulkMergeAsync(list, qualifiers);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            (error, message) = (true, ex.Message);
        }
        return (error, message);
    }

    public async Task<(bool, string)> BulkDeleteAsync<T>(IEnumerable<T> list, Expression<Func<T, object>> qualifiers) where T : class
    {
        var (error, message) = (false, "");
        try
        {
            using var connection = new SqlConnection(_connectionString);
            await connection.BulkDeleteAsync(list, qualifiers);
            OnDataChangeEventHandler();
        }
        catch (Exception ex)
        {
            (error, message) = (true, ex.Message);
        }
        return (error, message);
    }




    protected virtual void OnDataChangeEventHandler() => DataChangeEventHandler?.Invoke(this, EventArgs.Empty);

}